string[..] movie1_frames =
{
    "movie1/frame000.png",
    "movie1/frame001.png",
    "movie1/frame002.png",
    "movie1/frame003.png",
    "movie1/frame004.png",
    "movie1/frame005.png",
    "movie1/frame006.png",
    "movie1/frame007.png",
    "movie1/frame008.png",
    "movie1/frame009.png",
    "movie1/frame010.png",
    "movie1/frame011.png",
    "movie1/frame012.png",
    "movie1/frame013.png",
    "movie1/frame014.png",
    "movie1/frame015.png",
    "movie1/frame016.png",
    "movie1/frame017.png",
    "movie1/frame018.png",
    "movie1/frame019.png",
    "movie1/frame020.png"
};

string[..] movie2_frames =
{
    "movie2/frame000.png",
    "movie2/frame001.png",
    "movie2/frame002.png",
    "movie2/frame003.png",
    "movie2/frame004.png",
    "movie2/frame005.png",
    "movie2/frame006.png",
    "movie2/frame007.png",
    "movie2/frame008.png",
    "movie2/frame009.png",
    "movie2/frame010.png",
    "movie2/frame011.png",
    "movie2/frame012.png",
    "movie2/frame013.png",
    "movie2/frame014.png",
    "movie2/frame015.png",
    "movie2/frame016.png",
    "movie2/frame017.png",
    "movie2/frame018.png",
    "movie2/frame019.png",
    "movie2/frame020.png",
    "movie2/frame021.png",
    "movie2/frame022.png",
    "movie2/frame023.png",
    "movie2/frame024.png",
};


record TestItem {

    int id;

    //string image_filename;
    string sound1_filename;
    string sound2_filename;
}

record HabItem {

    int id;
    string sound1_filename;
    string sound2_filename;
    string sound3_filename;
    string sound4_filename;
    string sound5_filename;
            
    string sound6_filename;
    string sound7_filename;
    string sound8_filename;
    string sound9_filename;
    string sound10_filename;
    string sound11_filename;
    string sound12_filename; 
}

// arrays for hab and test
HabItem[..]  hab_items;
TestItem[..]  test_items;

//record for faces?

record FaceItem {

    int id;
    string face_filename;
}

// array for faces 
FaceItem[..] test_face_items; 


// array for faces 
FaceItem[..] hab_face_items; 



int load_stimuli()
{
    int status = OK;
    if( read_hab_csv(hab_items, hab_csv_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_hab_files(hab_items, hab_csv_file_name()) != OK) {
         status = ERROR;
         return status;
    }
    if( read_csv(test_items, test_csv_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_files(test_items, test_csv_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( read_csv_hab_face(hab_face_items, hab_face_csv_file_name() ) != OK) {
        status = ERROR;
        return status;
    }
    if( read_csv_test_face(test_face_items, test_face_csv_file_name() ) != OK) {
        status = ERROR;
        return status;
    }
    if( check_hab_face_files(hab_face_items, hab_face_csv_file_name() ) != OK) {
        status = ERROR;
        return status;
    }
    if( check_test_face_files(test_face_items, test_face_csv_file_name() ) != OK) {
        status = ERROR;
        return status;
    }
    return status;
}


// loads in csv into the specified target
int read_csv(TestItem[] target, string source)
{
    int err = target.load(stimuli_dir() + source,
    true,           // if true, file contains a header row
    1);             // number of lines to skip before header and data
    if (err) {
        println("Trouble loading from " + source);
        return err;         
    }

    return OK;
     // Load data into test_items table.
}

int read_hab_csv(HabItem[] target, string source)
{
    int err = target.load(stimuli_dir() + source,
    true,           // if true, file contains a header row
    1);             // number of lines to skip before header and data
    if (err) {
        println("Trouble loading from " + source);
        return err;         
    }

    return OK;
     // Load data into hab_items table.
}


// loads in csv into the specified target
int read_csv_hab_face(FaceItem[] target, string source)
{
    int err = target.load(stimuli_dir() + source,
    true,           // if true, file contains a header row
    1);             // number of lines to skip before header and data
    if (err) {
        println("Trouble loading from " + source);
        return err;         
    }

    return OK;
     // Load data into test_items table.
}

// loads in csv into the specified target
int read_csv_test_face(FaceItem[] target, string source)
{
    int err = target.load(stimuli_dir() + source,
    true,           // if true, file contains a header row
    1);             // number of lines to skip before header and data
    if (err) {
        println("Trouble loading from " + source);
        return err;         
    }

    return OK;
     // Load data into test_items table.
}


// Provides the csv file name based on participant data.
string test_csv_file_name()
{
    string vari;
    string groupid;
    
    string nativeness = 
         expdb.participant.get_enum_field("contrast_native_nonnative");
         
       if (nativeness == "nonnative") 
    {
        vari = "B";   
    }
         
    else if (nativeness == "native") 
    {
        vari = "A";
    }
         
    else
    {
    println("ERROR"); 
    }

    string group_choice = 
        expdb.participant.get_enum_field("group_one_two");
        
    if (group_choice == "one")
    {
        groupid = "1";
    }
        
    else if (group_choice == "two")
    {
        groupid = "2";  
    }
    else 
    {
        println("ERROR");
    }
        
    string name =
        "test_" + 
        expdb.participant.get_enum_field("contrast_native_nonnative") + 
        "_" + 
        expdb.participant.get_enum_field("first_alternation_alt_nalt") + 
        "_" + 
        vari + 
        groupid  + 
        ".csv";

    return name;
}

// Provides the csv file name based on participant data.
string hab_csv_file_name()
{
    string vari;
    string groupid;
    string speakerstatus;
    
    string nativeness = 
         expdb.participant.get_enum_field("contrast_native_nonnative");
         
    if (nativeness == "nonnative") 
    {
        vari = "B";   
    }
         
    else if (nativeness == "native") 
    {
        vari = "A";
    }
         
    else
    {
    println("ERROR"); 
    }

    string group_choice = 
        expdb.participant.get_enum_field("group_one_two");
        
    if (group_choice == "one")
    {
        groupid = "1";
    }
        
    else if (group_choice == "two")
    {
        groupid = "2";  
    }
    else 
    {
        println("ERROR");
    }

    // get single or multi speaker option
    string speakervariant = 
         expdb.participant.get_enum_field("speaker_multiple_single");

    if (speakervariant == "multiple")
    {
        speakerstatus = "mspeaker";
    }

    else if (speakervariant == "single")
    {
        speakerstatus = "sspeaker";  
    }
    else 
    {
        println("ERROR");
    }        
    string name =
            "hab_" +
            expdb.participant.get_enum_field("contrast_native_nonnative") + 
            "_" + 
            vari + 
            groupid + 
            "_"  +
            speakerstatus +
            ".csv";

    return name;
}


// Provides the csv file name based on participant data.
string test_face_csv_file_name()
{
    string name = "faces-test.csv";
    return name;
}

// Provides the csv file name based on participant data.
string hab_face_csv_file_name()
{
    string name = "faces-hab.csv";
    return name;
}

// checks files if in TestItem are okay
int check_files(TestItem[] target, string filename)
{
    println("Checking existance of stimuli files for " + filename);

    int status = OK;

    int index = 0;
    while(index < target.size)
    {
        string sound1_path = stimuli_dir() + "sounds/" + 
            target[index].sound1_filename;
        if( !file_okay(sound1_path)) status = ERROR;

        string sound2_path = stimuli_dir() + "sounds/" + 
            target[index].sound2_filename;
        if( !file_okay(sound1_path)) status = ERROR;
        
        index++;
    }

    return status;
}

// checks files if in TestItem are okay
int check_hab_files(HabItem[] target, string filename)
{
    println("Checking existance of stimuli files for " + filename);

    int status = OK;

    int index = 0;
    while(index < target.size)
    {
        string sound1_path = stimuli_dir() + "sounds/" + 
            target[index].sound1_filename;
        if( !file_okay(sound1_path)) status = ERROR;

        string sound2_path = stimuli_dir() + "sounds/" + 
            target[index].sound2_filename;
        if( !file_okay(sound2_path)) status = ERROR;
        
        string sound3_path = stimuli_dir() + "sounds/" + 
            target[index].sound3_filename;
        if( !file_okay(sound3_path)) status = ERROR;

        string sound4_path = stimuli_dir() + "sounds/" + 
            target[index].sound4_filename;
        if( !file_okay(sound4_path)) status = ERROR;

        string sound5_path = stimuli_dir() + "sounds/" + 
            target[index].sound5_filename;
        if( !file_okay(sound5_path)) status = ERROR;

        string sound6_path = stimuli_dir() + "sounds/" + 
            target[index].sound6_filename;
        if( !file_okay(sound6_path)) status = ERROR;
        
        string sound7_path = stimuli_dir() + "sounds/" + 
            target[index].sound7_filename;
        if( !file_okay(sound7_path)) status = ERROR;

        string sound8_path = stimuli_dir() + "sounds/" + 
            target[index].sound8_filename;
        if( !file_okay(sound8_path)) status = ERROR;

        string sound9_path = stimuli_dir() + "sounds/" + 
            target[index].sound9_filename;
        if( !file_okay(sound9_path)) status = ERROR;

        string sound10_path = stimuli_dir() + "sounds/" + 
            target[index].sound10_filename;
        if( !file_okay(sound6_path)) status = ERROR;
        
        string sound11_path = stimuli_dir() + "sounds/" + 
            target[index].sound11_filename;
        if( !file_okay(sound7_path)) status = ERROR;

        string sound12_path = stimuli_dir() + "sounds/" + 
            target[index].sound12_filename;
        if( !file_okay(sound12_path)) status = ERROR;

        index++;
    }

    return status;
}

// checks files if in FaceItem are okay
int check_hab_face_files(FaceItem[] target, string filename)
{
    println("Checking existance of stimuli files for " + filename);

    int status = OK;

    int index = 0;
    while(index < target.size)
    {
        string image_path = stimuli_dir() + "images/" + 
            target[index].face_filename;
        if( !file_okay(image_path)) status = ERROR;

        
        index++;
    }

    return status;
}


// checks files if in FaceItem are okay
int check_test_face_files(FaceItem[] target, string filename)
{
    println("Checking existance of stimuli files for " + filename);

    int status = OK;

    int index = 0;
    while(index < target.size)
    {
        string image_path = stimuli_dir() + "images/" + 
            target[index].face_filename;
        if( !file_okay(image_path)) status = ERROR;

        
        index++;
    }

    return status;
}

// but hey, we've only got 8 unique faces, while trials happen in 12s

// Checks if a file is both existent and readable
bool file_okay(string filepath)
{
    bool okay = file_exists(filepath) && file_readable(filepath);
    if(!okay)
        println("Problems with " + filepath);


    return okay;
}


