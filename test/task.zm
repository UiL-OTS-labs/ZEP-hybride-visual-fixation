import defs;
import test_page;

import attention_grabber_page;
import output;

Block task
{
    int output_table_number;
    string output_table_name;
    bool check_for_habituation;

    string[] movie_frames;

    dur[..] trial_total_looktime;

    TestItem[] test_items;
    
    FaceItem[] face_items;

    on_event:entry()
    {
        task.num_cycles = test_items.size;
        experiment.setup_response_box();
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Trial trial
    {
        TestItem item;
        //FaceItem faceitem;

        SubTrial attention_getter
        {
            on_event:entry()
            {   
                attention_grabber_page.setup(movie_frames);
                attention_grabber_page.action(this, event_time);
            }
        }

        SubTrial test
        {
            on_event:entry()
            {
                test_page.setup();
                trial.item = test_items[task.cycle];
                //trial.faceitem = face_items[task.cycle];
                test_page.action(this, trial.item, event_time);
            }

            on_event:exit()
            {
                trial_total_looktime.size = trial_total_looktime.size+1;
                trial_total_looktime[trial_total_looktime.size-1] = control.clock.duration;

                if(check_for_habituation && habituation_is_reached())
                    task.num_cycles = 0;
            }
        }

        on_event:exit()
        {
            int index;
            int look_counter = 1;
            // The timestamps record both the stop and start time. Hence we need to parse them in pairs.
            while(index < control.clock.timestamps.size-1)
            {
                TestOutput output;

                output.trial_num          = task.cycle+1;
                output.id                 = trial.item.id;
                output.image_filename     = test_page.faceitem.face_filename; //checl output
                output.sound1_filename    = trial.item.sound1_filename;
                output.sound2_filename    = trial.item.sound2_filename;
                output.look_num           = look_counter;
                output.looks_counted      = -9999;
                output.duration_length_ms = control.clock.timestamps[index+1]-control.clock.timestamps[index];
                
                output_append(test_output, output);

                look_counter++;
                index = index+2;
            }

            attention_grabber_page.cleanup();
            test_page.cleanup();
        }
    }

    bool habituation_is_reached()
    {
        if(trial_total_looktime.size < 6)
            return false;

        dur base_level_looktime = (
            trial_total_looktime[0] + 
            trial_total_looktime[1] + 
            trial_total_looktime[3] ) / 3;

        dur current_level_looktime = (
            trial_total_looktime[trial_total_looktime.size-3] + 
            trial_total_looktime[trial_total_looktime.size-2] + 
            trial_total_looktime[trial_total_looktime.size-1] ) / 3;

        real looking_time_ratio = real(current_level_looktime) / real(base_level_looktime);

        return looking_time_ratio <= LOOKTIME_HABITUATION_THRESHOLD;
    }

    on_event:exit()
    {
        output_save(test_output, output_table_name, output_table_number, output_table_name);

        if(check_for_habituation)
        {
            general_output.habituated = habituation_is_reached();
            general_output.habituated_at_trial = task.cycle+1;
        }

        control.reset_clock();
        reset();
    }

    void reset()
    {
        task.trial_total_looktime.size = 0;
        task.output_table_number       = -1;
        task.output_table_name         = "";
        task.movie_frames              = null;
        task.test_items                = null;
        task.check_for_habituation     = false;
    }
}

void setup(int output_table_number, 
           string output_table_name, 
           TestItem[] test_items,
           FaceItem[] face_items, 
           string[] movie_frames, 
           bool check_for_habituation)
{
    task.output_table_number   = output_table_number;
    task.output_table_name     = output_table_name;
    task.movie_frames          = movie_frames;
    task.test_items            = test_items;
    task.face_items            = face_items; 
    task.check_for_habituation = check_for_habituation;
}

void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled
    task.enter(caller);
}
