import defs;
import test_page;
//import habshuffle;

import attention_grabber_page;
import output;

Block habtask
{
    int output_table_number;
    string output_table_name;
    bool check_for_habituation;
    //bool is_hab_item;
    string[] movie_frames;

    dur[..] trial_total_looktime;

    //TestItem[] test_items;
    
    HabItem[] hab_items;
    
    FaceItem[] face_items;

    // println( " Test items.size" + test_items.size);


    on_event:entry()
    {
        //shuffle_hab_items = hab_items.shuffle()


        habtask.num_cycles = hab_items.size;
        experiment.setup_response_box();
        println("Hab items.size");
        println(hab_items.size);
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Trial habtrial
    {
        HabItem item;

        SubTrial attention_getter
        
        {
            on_event:entry()
            {   
                attention_grabber_page.setup(movie_frames);
                attention_grabber_page.action(this, event_time);
            }
        }

        SubTrial hab
        {
            on_event:entry()
            {
                test_page.hab_setup();

                habtrial.item = hab_items[habtask.cycle];
                test_page.hab_action(this, habtrial.item, event_time); 
            }

            on_event:exit()
            {
                trial_total_looktime.size = trial_total_looktime.size+1;
                trial_total_looktime[trial_total_looktime.size-1] = 
                    control.clock.duration;

                if(check_for_habituation && habituation_is_reached())
                    habtask.num_cycles = 0;
            }
        }

        on_event:exit()
        {
            int index;
            int look_counter = 1;
            string [] shuffled_audio_names = test_page.hab_audio.file_names;

            // The timestamps record both the stop and start time. 
            // Hence we need to parse them in pairs.
            while(index < control.clock.timestamps.size-1)
            {
                HabOutput output;

                output.trial_num          = habtask.cycle+1;
                output.id                 = habtrial.item.id;
                output.image_filename     = test_page.faceitem.face_filename; 
                output.sound1_filename    = shuffled_audio_names[0];
                output.sound2_filename    = shuffled_audio_names[1];
                output.sound3_filename    = shuffled_audio_names[2];  //habtrial.item.sound3_filename;
                output.sound4_filename    = shuffled_audio_names[3];  //habtrial.item.sound4_filename;
                output.sound5_filename    = shuffled_audio_names[4];  //habtrial.item.sound5_filename;
                output.sound6_filename    = shuffled_audio_names[5];  //habtrial.item.sound5_filename;
                output.sound7_filename    = shuffled_audio_names[6];  //habtrial.item.sound6_filename;
                output.sound8_filename    = shuffled_audio_names[7];  //habtrial.item.sound7_filename;
                output.sound9_filename    = shuffled_audio_names[8];  //habtrial.item.sound8_filename;
                output.sound10_filename   = shuffled_audio_names[9];  //habtrial.item.sound9_filename;
                output.sound11_filename   = shuffled_audio_names[10]; //habtrial.item.sound10_filename;
                output.sound12_filename   = shuffled_audio_names[11]; //habtrial.item.sound11_filename;
                                                                           
                output.look_num           = look_counter;
                output.looks_counted      = -9999;
                output.duration_length_ms = control.clock.timestamps[index+1] -
                                            control.clock.timestamps[index];              
                hab_output_append(hab_output, output);

                look_counter++;
                index = index+2;
            }

            attention_grabber_page.cleanup();
            test_page.cleanup();
        }
    }

    bool habituation_is_reached()
    {
        if(trial_total_looktime.size < 6)
            return false;

        dur base_level_looktime = (
            trial_total_looktime[0] + 
            trial_total_looktime[1] + 
            trial_total_looktime[2] ) / 3;

        dur current_level_looktime = (
            trial_total_looktime[trial_total_looktime.size-3] + 
            trial_total_looktime[trial_total_looktime.size-2] + 
            trial_total_looktime[trial_total_looktime.size-1] ) / 3;

        real looking_time_ratio = real(current_level_looktime) / 
                                     real(base_level_looktime);

        return looking_time_ratio <= LOOKTIME_HABITUATION_THRESHOLD;
    }

    on_event:exit()
    {
        hab_output_save(
            hab_output, 
            output_table_name, 
            output_table_number, 
            output_table_name);

        if(check_for_habituation)
        {
            general_output.habituated = habituation_is_reached();
            general_output.habituated_at_trial = habtask.cycle+1;
        }

        control.reset_clock();
        reset();
    }

    void reset()
    {
        habtask.trial_total_looktime.size = 0;
        habtask.output_table_number       = -1;
        habtask.output_table_name         = "";
        habtask.movie_frames              = null;
        habtask.hab_items                = null;
        habtask.check_for_habituation     = false;
    }
}


Block testtask
{
    int output_table_number;
    string output_table_name;
    bool check_for_habituation;
    //bool is_hab_item;
    string[] movie_frames;

    dur[..] trial_total_looktime;

    TestItem[] test_items;
    
    //HabItem[] hab_items;
    
    FaceItem[] face_items;


    //println( " Hab items.size" + hab_items.size)
    on_event:entry()
    {
        testtask.num_cycles = test_items.size;
        experiment.setup_response_box();
        println( " Test items.size" + test_items.size);
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Trial testtrial
    {
        TestItem item;

        SubTrial attention_getter
    
        {
            on_event:entry()
            {   
                attention_grabber_page.setup(movie_frames);
                attention_grabber_page.action(this, event_time);
            }
        }

        SubTrial test 
        {
            on_event:entry()
            {
                test_page.test_setup();
                testtrial.item = test_items[testtask.cycle];
                test_page.test_action(this, testtrial.item, event_time); 
            }

            on_event:exit()
            {
                trial_total_looktime.size = trial_total_looktime.size+1;
                trial_total_looktime[trial_total_looktime.size-1] = 
                    control.clock.duration;

                if(check_for_habituation && habituation_is_reached())
                    testtask.num_cycles = 0;
            }
        }

        on_event:exit()
        {
            int index;
            int look_counter = 1;
            // The timestamps record both the stop and start time. 
            // Hence we need to parse them in pairs.
            while(index < control.clock.timestamps.size-1)
            {
                TestOutput output;


                output.trial_num          = testtask.cycle+1;
                output.id                 = testtrial.item.id;
                output.image_filename     = test_page.faceitem.face_filename; 
                output.sound1_filename    = testtrial.item.sound1_filename;
                output.sound2_filename    = testtrial.item.sound2_filename;                                                                               
                output.look_num           = look_counter;
                output.looks_counted      = -9999;
                output.duration_length_ms = control.clock.timestamps[index+1] -
                                            control.clock.timestamps[index];              
                output_append(test_output, output);

                look_counter++;
                index = index+2;
            }

            attention_grabber_page.cleanup();
            test_page.cleanup();
        }
    }

    bool habituation_is_reached()
    {
        if(trial_total_looktime.size < 6)
            return false;

        dur base_level_looktime = (
            trial_total_looktime[0] + 
            trial_total_looktime[1] + 
            trial_total_looktime[2] ) / 3;

        dur current_level_looktime = (
            trial_total_looktime[trial_total_looktime.size-3] + 
            trial_total_looktime[trial_total_looktime.size-2] + 
            trial_total_looktime[trial_total_looktime.size-1] ) / 3;

        real looking_time_ratio = real(current_level_looktime) / 
                                     real(base_level_looktime);

        return looking_time_ratio <= LOOKTIME_HABITUATION_THRESHOLD;
    }

    on_event:exit()
    {
        output_save(
            test_output, 
            output_table_name, 
            output_table_number, 
            output_table_name);

        if(check_for_habituation)
        {
            general_output.habituated = habituation_is_reached();
            general_output.habituated_at_trial = testtask.cycle+1;
        }

        control.reset_clock();
        reset();
    }

    void reset()
    {
        testtask.trial_total_looktime.size = 0;
        testtask.output_table_number       = -1;
        testtask.output_table_name         = "";
        testtask.movie_frames              = null;
        testtask.test_items                = null;
        testtask.check_for_habituation     = false;
    }
}

void hab_setup(int output_table_number, 
           string output_table_name, 
           HabItem[] hab_items,
           FaceItem[] face_items, 
           string[] movie_frames, 
           bool check_for_habituation)
{
    habtask.output_table_number   = output_table_number;
    habtask.output_table_name     = output_table_name;
    habtask.movie_frames          = movie_frames;
    habtask.hab_items             = hab_items;
    habtask.face_items            = face_items;
    habtask.check_for_habituation = check_for_habituation;
}

void test_setup(int output_table_number, 
           string output_table_name, 
           TestItem[] test_items,
           FaceItem[] face_items, 
           string[] movie_frames, 
           bool check_for_habituation)
{
    testtask.output_table_number   = output_table_number;
    testtask.output_table_name     = output_table_name;
    testtask.movie_frames          = movie_frames;
    testtask.test_items            = test_items;
    testtask.face_items            = face_items;
    testtask.check_for_habituation = check_for_habituation;
}

void hab_action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled
    habtask.enter(caller);
}

void test_action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled
    testtask.enter(caller);
}