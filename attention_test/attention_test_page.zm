import std_sound_output_device;
import stimuli;
import sound_direction;


// An image is considered visible when its number from this array is
// smaller or equal to the number here.
int[..] visibles = {1,2,3,4,5,6,7,8,9};

Page attention_test_page 
{
    // reference to the pictures in ./stimuli.zm
    string[] pictures;
    string   image_dir;

	init()
    {
        fill_pattern_color = rgb:BAD6EB;
        image_dir = stimuli_dir() + "images/";
    }

    HorGridLayout layout 
    {
        on_event:init()
        {
            wrap_count = 3;
        }

        CanvasGadget canvas1
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas2
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas3
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas4
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas5
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas6
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas7
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas8
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        CanvasGadget canvas9
        {
            on_event:init()
            {
                size = IM_WIDTH,IM_HEIGHT;
                is_visible = true;
                offset_x = width/2;
                offset_y = height/2;
            }

            ImageShape image
            {
            }
        }

        // centers a new image around the origin.
        void set_image_centered(ImageShape im, string fn)
        {
            real scaling = 1.0;
            real imwidth;
            real imheight;

            im.image    = image_dir + fn;

            imwidth     = im.actual_width;
            imheight    = im.actual_height;
            
            if (real(IM_WIDTH) / imwidth < scaling)
                scaling = real(IM_WIDTH) /imwidth;
            if (real(IM_HEIGHT) / imheight < scaling)
                scaling = real(IM_HEIGHT) / imheight;

            im.scaling_x = scaling;
            im.scaling_y = scaling;

            imwidth *= scaling;
            imheight*= scaling;

            if (im.offset_x != -imwidth/2)
                im.offset_x = -imwidth/2;
            if (im.offset_y != -imheight/2)
                im.offset_y = -imheight/2;

        }

        void redraw_image(ImageShape im, int index)
        {
            int visible     = visibles[index];
            bool is_visible = visible <= NUM_VISIBLE_IMAGES;
            im.is_visible   = is_visible;
            string stimulus = is_visible ? pictures[index] : "";
            if (is_visible)
                set_image_centered(im, stimulus);
            else
                im.image = "";
        }
    }

    Timer draw_timer
    {
        int nth_draw;

        void setup()
        {
            nth_draw = 0;
        }

        void redraw_images()
        {
            visibles.shuffle(0, -1);
            pictures.shuffle(0, -1);
            layout.redraw_image(layout.canvas1.image, 0);
            layout.redraw_image(layout.canvas2.image, 1);
            layout.redraw_image(layout.canvas3.image, 2);
            layout.redraw_image(layout.canvas4.image, 3);
            layout.redraw_image(layout.canvas5.image, 4);
            layout.redraw_image(layout.canvas6.image, 5);
            layout.redraw_image(layout.canvas7.image, 6);
            layout.redraw_image(layout.canvas8.image, 7);
            layout.redraw_image(layout.canvas9.image, 8);
        }
        
    	on_event:expire()
    	{
            if (nth_draw < NUM_PIC_PRESENTATION) {
                redraw_images();
                start(expected_expire_time + PICTURE_SHOW_DURATION);
                nth_draw++;
            }
            else
                done(CONTINUE);
    	}
    }

    SoundChain audio
	{
	    BeepGenerator beep 
	    {
	        on_event: init()
	        {
	            set_scaling(BEEP_VOLUME_RATIO);
	        }
	    }
	    
	    SoundPlayback playback {}
	   
        on_event:start()
        {
            control.show_speaker_icon(FRONT_SIDE);
        }

	    on_event:finish()
	    {
            control.hide_speaker_icon(FRONT_SIDE);
	        start(expected_finish_time + BEEP_ISI);
	    }

	    time play(time t, SoundDirection dir)
	    {
			playback.device        = sound_output_device;
			beep.frequency         = BEEP_FREQUENCY;
			beep.content_duration  = BEEP_DURATION;
			beep.fade_in_duration  = 5ms;
			beep.fade_out_duration = 5ms;

            // mute all channels.
            playback.set_scaling(0.0);

            if (dir & SND_DIRECTION_FRONT) {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  1.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 1.0);
            }
            else {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  0.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 0.0);
            }

            if (dir & SND_DIRECTION_LEFT)
                playback.set_scaling(CHANNEL_REAR_LEFT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_LEFT, 0.0);
            
            if (dir & SND_DIRECTION_RIGHT)
                playback.set_scaling(CHANNEL_REAR_RIGHT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_RIGHT, 0.0);

			start(t);
			return audio.expected_start_time;
	    }
	}

    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
       	layout.abort();
 		audio.abort();
        cleanup();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }
 

    // Performs preparatory work required before using this page.
    void setup()
    {
        cleanup();
        experiment.setup_response_box();
        draw_timer.setup();

        pictures = attention_images;
    }
 
 
    // Performs cleaning up if necessary.
    void cleanup()
    {
        layout.full_abort();
    }
 
 
    // Starts a trial.
    void action(Object caller, time tref)
    {
        // Timing for the test:
        tref = test_window1.show_test_page(this, tref + 100ms);
        layout.start(tref);
        audio.play(tref, SND_DIRECTION_FRONT);

        draw_timer.start(tref);

        control.begin_clock();
        control.release_clock(tref);
        control.start_clock(tref);

        control.set_status("Attention Test");
        
        // Mark out our next target:
        this.target       = caller;
    }
}
